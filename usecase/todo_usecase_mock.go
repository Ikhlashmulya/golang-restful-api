// Code generated by MockGen. DO NOT EDIT.
// Source: todo_usecase.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	model "github.com/Ikhlashmulya/golang-restful-api/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTodoUsecase is a mock of TodoUsecase interface.
type MockTodoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTodoUsecaseMockRecorder
}

// MockTodoUsecaseMockRecorder is the mock recorder for MockTodoUsecase.
type MockTodoUsecaseMockRecorder struct {
	mock *MockTodoUsecase
}

// NewMockTodoUsecase creates a new mock instance.
func NewMockTodoUsecase(ctrl *gomock.Controller) *MockTodoUsecase {
	mock := &MockTodoUsecase{ctrl: ctrl}
	mock.recorder = &MockTodoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoUsecase) EXPECT() *MockTodoUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoUsecase) Create(ctx context.Context, request model.CreateTodoRequest) model.TodoResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(model.TodoResponse)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTodoUsecaseMockRecorder) Create(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoUsecase)(nil).Create), ctx, request)
}

// Delete mocks base method.
func (m *MockTodoUsecase) Delete(ctx context.Context, todoId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, todoId)
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoUsecaseMockRecorder) Delete(ctx, todoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoUsecase)(nil).Delete), ctx, todoId)
}

// GetAll mocks base method.
func (m *MockTodoUsecase) GetAll(ctx context.Context) []model.TodoResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.TodoResponse)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTodoUsecaseMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoUsecase)(nil).GetAll), ctx)
}

// GetById mocks base method.
func (m *MockTodoUsecase) GetById(ctx context.Context, todoId string) model.TodoResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, todoId)
	ret0, _ := ret[0].(model.TodoResponse)
	return ret0
}

// GetById indicates an expected call of GetById.
func (mr *MockTodoUsecaseMockRecorder) GetById(ctx, todoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTodoUsecase)(nil).GetById), ctx, todoId)
}
